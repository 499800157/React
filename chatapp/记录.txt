webpack的配置

babel-plugin-import  //使用ant-design按需加载css

"babel": {
    "presets": [
      "react-app"
    ],
    "plugins": [
      [
        "transform-decorators-legacy"       //redux支持装饰器的写法     //cnpm install babel-plugin-transform-decorators-legacy --save-dev
      ],
//如果装饰器这里不能用 使用下面这个
[
        "@babel/plugin-proposal-decorators",
        {
          "decoratorsBeforeExport": true
        }
      ],

      [                                         ////使用ant-design按需加载css
        "import",
        {
          "libraryName": "antd-mobile",
          "style": "css"
        }
      ]
    ]
  },
  "eslintConfig": {
    "extends": "react-app"
  },
  "devDependencies": {
    "babel-plugin-transform-decorators-legacy": "^1.3.5"
  },
  "proxy" :""                   //axios处理跨域  路径写服务端的地址


安装
cnpm install react-router-dom --save        //import { BrowserRouter , Route , Link , Redirect , Switch} from "react-router-dom"
cnpm install react-redux --save             //import {Provider} from "react-redux"
cnpm install redux-thunk --save        // import thunk from "redux-thunk"
cnpm install redux --save     //import {createStore , applyMiddleware,compose} from "redux"
cnpm install axios --save               //import axios from "axios"
cnpm install antd-mobile@next --save

cnpm install  babel-plugin-import --save-dev        //antd css的按需加载
[
    "import",
    {
        "libraryName": "antd-mobile",
        "style": "css"
    }
]
cnpm install babel-plugin-transform-decorators-legacy --save-dev        //装饰器所需
[
    "@babel/plugin-proposal-decorators",
    {
        "decoratorsBeforeExport": true
    }
],

cnpm install express --save             
cnpm install mongoose --save
cnpm install body-parser --save         //mongoose 专门接收post传的参数
cnpm install cookie-parser --save 



cnpm install utility --save 安装md5加密
const utility = require("utility)
使用 utility.md5(pwd)
或者使用 blueimp-md5库

密码加严
function md5Pwd (pwd){
    const salt = "imooc_is_good_dsas454d5s6a56"
    return utility.md5(utility.md5(pwd+salt))
}
md5Pwd（pwd）


注册 时不能将cookie的userid存入，需要用到save方法
 const userModel = new User({user ,type ,pwd : md5Pwd(pwd)})
    userModel.save(function(e,d){
        if(e){
            return res.json({code : 1,msg :"后端出错了"})
        }
        const {user ,type ,_id} = d
        res.cookie("userid" , _id)
        if(d){
            return res.json({code : 0 ,data :{user ,type ,_id}})
        }
    })

axios {
    get的方式通过query获取
    post的方式通过body获取
}
cookie的插件
browser-cookies
browserCookies.erase("userid") //清除cookie




理解高阶组件
第一步

function hello(){
    console.log( "hello react ")
}
function wrapperHello (fn){
    return function(){
        console.log("before hello")
        fn()
        console.log("after hello")
    }
}
hello = wrapperHello(hello)
这是一个装饰器的模式

通过babel转译 ，其实组件就是一个函数

高阶组件其实就是 给一个组件 返回另外一个组件
定义一个函数，传进来一个组件，返回另外一个组件，包裹这传进来的组件
高阶组件有两种{
    属性代理
    反向继承
}

//属性代理
class Hello extends React.Component {
    render(){
        return <h2>hello react</h2>   
    }
}
function WrapperHello(Comp){
    class WrapComp extends React.Component{
        render(){
            return (
                <div >
                    <p>这是HOC高阶组件特有的元素</p>
                    <Comp {...this.props}></Comp>
                </div>
            )
        }
    }
    return WrapComp
}
Hello = WrapperHello (Hello)

  反向继承
  class Hello extends React.Component {
    render(){
        return <h2>hello react</h2>   
    }
}
function WrapperHello(Comp){
    class WrapComp extends Comp{
        componentDidMount(){
            console.log("高阶组件新增的生命周期，加载完成！")
        }
        render(){
            return (
                <Comp></Comp>
            )
        }
    }
    return WrapComp
}

配置使用less
安装
 cnpm install less less-loader --save-dev
webpack.config.dev.js 修改 添加一项 同理在webpack.config.prod.js也修改
{
  test: /\.less$/,
  use: [
      require.resolve('style-loader'),
      {
          loader: require.resolve('css-loader')
      },
      {
          loader: require.resolve('less-loader'), // compiles Less to CSS
      },
  ],
},


JavaScript强制要求如果要this在构造函数中使用，则必须先调用super
这就是为什么我建议总是传递下来super(props)，即使它不是绝对必要的：


createStore方法需要记忆，以及compose连接redux插件


项目采用前后台分离
前台数据展现，使用react全家桶 react + react-router +……

后台项目基于node的 路由用express做的 mongodb数据存储

前后台交互使用 ajax请求 通过axios库  async / await  (es7中)
测试API接口 postman




1.删除原有文件
src/下建立文件目录

2.引入antd-mobile
安装
cnpm install --save antd-mobile@next 
cnpm install react-app-rewired --save-dev

不能npm run eject , 否则会报错
3.修改/* package.json */
"scripts": {
-   "start": "react-scripts start",
+   "start": "react-app-rewired start",
-   "build": "react-scripts build",
+   "build": "react-app-rewired build",
-   "test": "react-scripts test --env=jsdom",
+   "test": "react-app-rewired test --env=jsdom",
}

4.然后在项目根目录创建一个 config-overrides.js 用于修改默认配置。
module.exports = function override(config, env) {
  // do stuff with the webpack config...
  return config;
};
//按需加载
cnpm install babel-plugin-import --save-dev    
 在config-overrides.js文件下添加
const { injectBabelPlugin } = require('react-app-rewired');
  module.exports = function override(config, env) {
+   config = injectBabelPlugin(['import', { libraryName: 'antd-mobile', style: 'css' }], config);
    return config;
  };

  5.页面的处理
  index.html
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1,
    minimum-scale=1, user-scalable=no" />

<!-- 解决300毫秒的延迟 -->
<script src="https://as.alipayobjects.com/g/component/fastclick/1.0.6/fastclick.js"></script>
<script>
    if ('addEventListener' in document) {
        document.addEventListener('DOMContentLoaded', function() {
        FastClick.attach(document.body);
        }, false);
        }
        if(!window.Promise) {
        document.writeln('<script src="https://as.alipayobjects.com/g/component/es6-promise/3.2.2/es6-promise.min.js"'+'>'+'<'+'/'+'script>');
    }
</script>

6.自定义主题（未成功）
安装
cnpm install --save-dev less@2.7.3 less-loader

配置: config-overrides.js

寻求他法
.am-button-primary{
    background: green;
}
.am-button-primary.am-button-active{
    background: red;
}


7.引入less
安装
npm install react-app-rewire-less

 在config-overrides.js文件下添加
const { injectBabelPlugin } = require('react-app-rewired');
const rewireLess = require("react-app-rewire-less");

module.exports = function override(config, env) {
    // do stuff with the webpack config... 
    config = injectBabelPlugin(['import', { libraryName: 'antd-mobile', style: 'css' }], config);
    config = rewireLess.withLoaderOptions({
        // modifyVars: { "@brand-primary": "#1cae82" , "@brand-primary-tap": "#1DA57A", }, //配置主题未生效
    })(config, env);
    return config;
};




